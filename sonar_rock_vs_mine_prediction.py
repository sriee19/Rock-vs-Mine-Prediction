# -*- coding: utf-8 -*-
"""Sonar Rock vs Mine Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oziISFXreZw7AUPVEP2ae42iQvk7PVcJ

Importing the dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and data processing"""

sonar_data = pd.read_csv('sonar data.csv', header=None)

sonar_data.head() # first five rows and columns

sonar_data.tail() # last five rows and columns

sonar_data.describe() # describe the stat measure of data

sonar_data.shape # number of rows and columns

sonar_data.value_counts()

sonar_data[60].value_counts() # there are 60 head counts

"""M --> Mine
R --> Rocks
"""

sonar_data.groupby(60).mean()

# separating the data and the values

X = sonar_data.drop(columns=60,axis =1) # dropiing the 60th column
Y = sonar_data[60] # saving them in y

print(X)
print(Y)

# Training and testing data

X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.1,stratify=Y,random_state=1)

print(X.shape, X_train.shape, X_test.shape)

# Train out model with x_train

"""ModelTraining --> Logistic Regression"""

model= LogisticRegression()

#training the logistic regression model with training data

model.fit(X_train,Y_train)

# checking the accuracy score of our model

"""model evaluation"""

#accuracy on training data

X_train_prediction = model.predict(X_train)
accuracy = accuracy_score(X_train_prediction, Y_train)

print("accuracy = ", accuracy)

# Accuracy score for test data

X_test_prediction = model.predict(X_test)
accuracy = accuracy_score(X_test_prediction, Y_test)

print("accuracy = ", accuracy)

# Now we are making a predictive system for determmining rock or mine

input_data = (0.0200,0.0371,0.0428,0.0207,0.0954,0.0986,0.1539,0.1601,0.3109,0.2111,0.1609,0.1582,0.2238,0.0645,0.0660,0.2273,0.3100,0.2999,0.5078,0.4797,0.5783,0.5071,0.4328,0.5550,0.6711,0.6415,0.7104,0.8080,0.6791,0.3857,0.1307,0.2604,0.5121,0.7547,0.8537,0.8507,0.6692,0.6097,0.4943,0.2744,0.0510,0.2834,0.2825,0.4256,0.2641,0.1386,0.1051,0.1343,0.0383,0.0324,0.0232,0.0027,0.0065,0.0159,0.0072,0.0167,0.0180,0.0084,0.0090,0.0032)
# covert it to numpy array
input_data_as_array = np.asarray(input_data)

# reshape the numpy array as we are predicting for one instance
input_data_reshape = input_data_as_array.reshape(1,-1)

predict = model.predict(input_data_reshape)
print(predict)

if (predict[0]=='R'):
  print("The object is a Rock")
else:
  print("The object is a Mine")

